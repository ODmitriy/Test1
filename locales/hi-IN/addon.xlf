<?xml version='1.0' encoding='UTF-8'?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-strict.xsd">
  <file original="Linguist Assessment.docx" source-language="en-US" target-language="hi-IN" datatype="xml">
    <header>
      <tool tool-id="DVX3" tool-name="Déjà Vu X3" tool-version="9.0.765" tool-company="ATRIL"/>
    </header>
    <body>
      <trans-unit id="0000003" reformat="no">
        <source xml:lang="en-US">"I want to tell you about a couple strategies for avoiding <ph id="102">{00102}</ph>deadlocks<ph id="103">{00103}</ph>.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000003">"I want to tell you about a couple strategies for avoiding <ph id="102">{00102}</ph>deadlocks<ph id="103">{00103}</ph>.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000006" reformat="no">
        <source xml:lang="en-US">"<ph id="104">{00104}</ph>The best strategy is a thoughtful architecture and a set of rules governing when and in what order you can use locks (acquire mutexes).<ph id="105">{00105}</ph>
        </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000006">"<ph id="104">{00104}</ph>The best strategy is a thoughtful architecture and a set of rules governing when and in what order you can use locks (acquire mutexes).<ph id="105">{00105}</ph>
          </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000007" reformat="no">
        <source xml:lang="en-US">The classic approach to the problem is to develop a lock hierarchy and establish the rule that certain locks can never be acquired in a state where certain other locks have already been acquired.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000007">The classic approach to the problem is to develop a lock hierarchy and establish the rule that certain locks can never be acquired in a state where certain other locks have already been acquired.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000010" reformat="no">
        <source xml:lang="en-US">"For example, sometimes locks are assigned levels, and a thread is required to acquire locks in order from higher levels to lower levels (but acquiring locks in the other direction is not allowed). </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000010">"For example, sometimes locks are assigned levels, and a thread is required to acquire locks in order from higher levels to lower levels (but acquiring locks in the other direction is not allowed). </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000011" reformat="no">
        <source xml:lang="en-US">Additionally, acquiring multiple locks with the same level is not allowed.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000011">Additionally, acquiring multiple locks with the same level is not allowed.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000021" reformat="no">
        <source xml:lang="en-US">            Until now, we've set the apple's coordinates manually. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000021">            Until now, we've set the apple's coordinates manually. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000022" reformat="no">
        <source xml:lang="en-US">We need to create a method for generating new apples. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000022">We need to create a method for generating new apples. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000023" reformat="no">
        <source xml:lang="en-US">Let's call it createNewApple().</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000023">Let's call it createNewApple().</mrk>
        </seg-source>
        <target xml:lang="es-ES">Назовем его createNewApple(). <mrk mtype="seg" mid="0000023"/>
        </target>
      </trans-unit>
      <trans-unit id="0000026" reformat="no">
        <source xml:lang="en-US">            The method should generate random cell coordinates within the playing field, which determine where the apple will appear. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000026">            The method should generate random cell coordinates within the playing field, which determine where the apple will appear. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000027" reformat="no">
        <source xml:lang="en-US">Assign a reference to the newly created apple to the apple field. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000027">Assign a reference to the newly created apple to the apple field. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000028" reformat="no">
        <source xml:lang="en-US">Also, at the end of each turn you need to check whether the current apple is still alive. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000028">Also, at the end of each turn you need to check whether the current apple is still alive. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000029" reformat="no">
        <source xml:lang="en-US">If it is not, then create a new one.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000029">If it is not, then create a new one.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000032" reformat="no">
        <source xml:lang="en-US">            To generate random numbers, call the parent class's getRandomNumber(int) method.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000032">            To generate random numbers, call the parent class's getRandomNumber(int) method.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000038" reformat="no">
        <source xml:lang="en-US">1. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000038">1. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000039" reformat="no">
        <source xml:lang="en-US">The SnakeGame class must have a private void createNewApple() method.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000039">The SnakeGame class must have a private void createNewApple() method.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000042" reformat="no">
        <source xml:lang="en-US">- The SnakeGame class is missing the createNewApple() method.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000042">- The SnakeGame class is missing the createNewApple() method.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000045" reformat="no">
        <source xml:lang="en-US">- The createNewApple() method's return type must be void.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000045">- The createNewApple() method's return type must be void.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000048" reformat="no">
        <source xml:lang="en-US">- The createNewApple() method must be private.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000048">- The createNewApple() method must be private.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000051" reformat="no">
        <source xml:lang="en-US">- The createNewApple() method must not be static.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000051">- The createNewApple() method must not be static.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000059" reformat="no">
        <source xml:lang="en-US">"Jackson is one of the most popular frameworks. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000059">"Jackson is one of the most popular frameworks. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000060" reformat="no">
        <source xml:lang="en-US">We will use it as an example as we look at how to work with JSON.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000060">We will use it as an example as we look at how to work with JSON.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000063" reformat="no">
        <source xml:lang="en-US">"First, you need to download this framework and add it to your project. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000063">"First, you need to download this framework and add it to your project. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000064" reformat="no">
        <source xml:lang="en-US">You need to do this directly in IntelliJ IDEA. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000064">You need to do this directly in IntelliJ IDEA. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000065" reformat="no">
        <source xml:lang="en-US">You can download the framework using this <ph id="1">{1}</ph>
          <ph id="108">{00108}</ph>link<ph id="109">{00109}</ph>
          <ph id="2">{2}</ph>."</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000065">You can download the framework using this <ph id="1">{1}</ph>
            <ph id="108">{00108}</ph>link<ph id="109">{00109}</ph>
            <ph id="2">{2}</ph>."</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000068" reformat="no">
        <source xml:lang="en-US">"Done."</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000068">"Done."</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000071" reformat="no">
        <source xml:lang="en-US">"Great. </source>
        <target>"Круто.</target>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000071">"Great. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000072" reformat="no">
        <source xml:lang="en-US">Let's carry on, then."</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000072">Let's carry on, then."</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000075" reformat="no">
        <source xml:lang="en-US">"Converting a Java object into JSON is about as easy as serializing it. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000075">"Converting a Java object into JSON is about as easy as serializing it. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000076" reformat="no">
        <source xml:lang="en-US">To do this, there is a special ObjectMapper class (com.fasterxml.jackson.databind.ObjectMapper).</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000076">To do this, there is a special ObjectMapper class (com.fasterxml.jackson.databind.ObjectMapper).</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000079" reformat="no">
        <source xml:lang="en-US">"Let me show you a working example, and then we'll analyze it:</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000079">"Let me show you a working example, and then we'll analyze it:</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000082" reformat="no">
        <source xml:lang="en-US">Convert an object to JSON</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000082">Convert an object to JSON</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000085" reformat="no">
        <source xml:lang="en-US">public static void main(String[] args) throws IOException</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000085">public static void main(String[] args) throws IOException</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000091" reformat="no">
        <source xml:lang="en-US"> // Create an object to be serialized into JSON</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000091"> // Create an object to be serialized into JSON</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000094" reformat="no">
        <source xml:lang="en-US"> Cat cat = new Cat();</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000094"> Cat cat = new Cat();</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000097" reformat="no">
        <source xml:lang="en-US"> cat.name = "Missy";</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000097"> cat.name = "Missy";</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000100" reformat="no">
        <source xml:lang="en-US"> cat.age = 5;</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000100"> cat.age = 5;</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000103" reformat="no">
        <source xml:lang="en-US"> cat.weight = 4;</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000103"> cat.weight = 4;</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000108" reformat="no">
        <source xml:lang="en-US"> // Write the result of the serialization to a StringWriter</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000108"> // Write the result of the serialization to a StringWriter</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000111" reformat="no">
        <source xml:lang="en-US"> StringWriter writer = new StringWriter();</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000111"> StringWriter writer = new StringWriter();</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000116" reformat="no">
        <source xml:lang="en-US"> // This is the Jackson object that performs the serialization</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000116"> // This is the Jackson object that performs the serialization</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000119" reformat="no">
        <source xml:lang="en-US"> ObjectMapper mapper = new ObjectMapper();</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000119"> ObjectMapper mapper = new ObjectMapper();</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000124" reformat="no">
        <source xml:lang="en-US"> // And here's the serialization itself: </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000124"> // And here's the serialization itself: </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000125" reformat="no">
        <source xml:lang="en-US">the first argument is where, and the second is what</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000125">the first argument is where, and the second is what</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000128" reformat="no">
        <source xml:lang="en-US"> mapper.writeValue(writer, cat);</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000128"> mapper.writeValue(writer, cat);</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000133" reformat="no">
        <source xml:lang="en-US"> // Convert everything written to the StringWriter into a String </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000133"> // Convert everything written to the StringWriter into a String </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000136" reformat="no">
        <source xml:lang="en-US"> String result = writer.toString();</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000136"> String result = writer.toString();</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000139" reformat="no">
        <source xml:lang="en-US"> System.out.println(result);</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000139"> System.out.println(result);</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000156" reformat="no">
        <source xml:lang="en-US">This code has four bugs, and your task is... </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000156">This code has four bugs, and your task is... </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000157" reformat="no">
        <source xml:lang="en-US">Yeah, you already know what your task is. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000157">Yeah, you already know what your task is. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000158" reformat="no">
        <source xml:lang="en-US">First of all, you need to figure out what the code does. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000158">First of all, you need to figure out what the code does. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000159" reformat="no">
        <source xml:lang="en-US">Create something and fix the bugs that were written before you got involved with the code (as well as any that appear after you get involved). </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000159">Create something and fix the bugs that were written before you got involved with the code (as well as any that appear after you get involved). </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000166" reformat="no">
        <source xml:lang="en-US">            1. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000166">            1. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000167" reformat="no">
        <source xml:lang="en-US">Think about what the main method does.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000167">Think about what the main method does.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000170" reformat="no">
        <source xml:lang="en-US">            2. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000170">            2. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000171" reformat="no">
        <source xml:lang="en-US">Create static methods initList(List &lt;Number&gt; list), printListValues(List &lt;Number&gt; list), and processCastObjects(List &lt;Number&gt; list) in the Solution class.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000171">Create static methods initList(List &lt;Number&gt; list), printListValues(List &lt;Number&gt; list), and processCastObjects(List &lt;Number&gt; list) in the Solution class.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000174" reformat="no">
        <source xml:lang="en-US">            3. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000174">            3. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000175" reformat="no">
        <source xml:lang="en-US">Find the block of code that fills the list with values and move it to the initList method.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000175">Find the block of code that fills the list with values and move it to the initList method.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000178" reformat="no">
        <source xml:lang="en-US">            4. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000178">            4. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000179" reformat="no">
        <source xml:lang="en-US">Find the block of code that uses a for loop to display the contents of the list, and move it to the printListValues method.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000179">Find the block of code that uses a for loop to display the contents of the list, and move it to the printListValues method.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000182" reformat="no">
        <source xml:lang="en-US">            5. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000182">            5. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000183" reformat="no">
        <source xml:lang="en-US">Find the block of code that checks the type of each object of the list and displays messages on the screen, and move it to the processCastObjects method.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000183">Find the block of code that checks the type of each object of the list and displays messages on the screen, and move it to the processCastObjects method.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000186" reformat="no">
        <source xml:lang="en-US">            6. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000186">            6. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000187" reformat="no">
        <source xml:lang="en-US">Correct 2 bugs in the printListValues method so that the method correctly displays the contents of the list passed as an argument.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000187">Correct 2 bugs in the printListValues method so that the method correctly displays the contents of the list passed as an argument.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000190" reformat="no">
        <source xml:lang="en-US">            7. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000190">            7. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000191" reformat="no">
        <source xml:lang="en-US">Correct 2 bugs related to type casting in the processCastObjects method</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000191">Correct 2 bugs related to type casting in the processCastObjects method</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000194" reformat="no">
        <source xml:lang="en-US">            - for a Float object, you need to display "Is float defined? </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000194">            - for a Float object, you need to display "Is float defined? </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000195" reformat="no">
        <source xml:lang="en-US">" + !(&lt;Float object&gt;.isNaN()).</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000195">" + !(&lt;Float object&gt;.isNaN()).</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000198" reformat="no">
        <source xml:lang="en-US">            - for a Double object, you need to print "Is double infinite? </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000198">            - for a Double object, you need to print "Is double infinite? </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000199" reformat="no">
        <source xml:lang="en-US">" + &lt;Double object&gt;.isInfinite().</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000199">" + &lt;Double object&gt;.isInfinite().</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000205" reformat="no">
        <source xml:lang="en-US">
          <ph id="102">{00102}</ph>System.in<ph id="103">{00103}</ph> is an <ph id="202">{00202}</ph>InputStream<ph id="203">{00203}</ph> object, an instance of the class we spoke about early. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000205">
            <ph id="102">{00102}</ph>System.in<ph id="103">{00103}</ph> is an <ph id="202">{00202}</ph>InputStream<ph id="203">{00203}</ph> object, an instance of the class we spoke about early. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000208" reformat="no">
        <source xml:lang="en-US">It is an input stream linked to a system input device (the keyboard).</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000208">It is an input stream linked to a system input device (the keyboard).</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000213" reformat="no">
        <source xml:lang="en-US">By the way, you're indirectly familiar with this stream. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000213">By the way, you're indirectly familiar with this stream. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000214" reformat="no">
        <source xml:lang="en-US">After all, you frequently use its "coworker" — <ph id="102">{00102}</ph>System.out<ph id="103">{00103}</ph>! </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000214">After all, you frequently use its "coworker" — <ph id="102">{00102}</ph>System.out<ph id="103">{00103}</ph>! </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000215" reformat="no">
        <source xml:lang="en-US">System.out is the system <ph id="102">{00102}</ph>output<ph id="103">{00103}</ph> stream. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000215">System.out is the system <ph id="102">{00102}</ph>output<ph id="103">{00103}</ph> stream. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000216" reformat="no">
        <source xml:lang="en-US">It is used to output data to the console via your favorite method <ph id="102">{00102}</ph>System.out.println()<ph id="103">{00103}</ph>, which you use constantly :)</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000216">It is used to output data to the console via your favorite method <ph id="102">{00102}</ph>System.out.println()<ph id="103">{00103}</ph>, which you use constantly :)</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000221" reformat="no">
        <source xml:lang="en-US">
          <ph id="102">{00102}</ph>System.out<ph id="103">{00103}</ph> is a stream for sending data to the console, while <ph id="202">{00202}</ph>System.in<ph id="203">{00203}</ph> is for getting data from the keyboard. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000221">
            <ph id="102">{00102}</ph>System.out<ph id="103">{00103}</ph> is a stream for sending data to the console, while <ph id="202">{00202}</ph>System.in<ph id="203">{00203}</ph> is for getting data from the keyboard. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000222" reformat="no">
        <source xml:lang="en-US">It's all simple :)</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000222">It's all simple :)</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000227" reformat="no">
        <source xml:lang="en-US">What's more, we can read data from the keyboard without this huge construct. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000227">What's more, we can read data from the keyboard without this huge construct. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000228" reformat="no">
        <source xml:lang="en-US">We can simply write: </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000228">We can simply write: </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000229" reformat="no">
        <source xml:lang="en-US">System.in.read();</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000229">System.in.read();</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000236" reformat="no">
        <source xml:lang="en-US">
          <ph id="3">{3}</ph>
          <ph id="102">{00102}</ph>public class <ph id="103">{00103}</ph>
          <ph id="4">{4}</ph>Main {</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000236">
            <ph id="3">{3}</ph>
            <ph id="102">{00102}</ph>public class <ph id="103">{00103}</ph>
            <ph id="4">{4}</ph>Main {</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000241" reformat="no">
        <source xml:lang="en-US">
          <ph id="5">{5}</ph>
          <ph id="102">{00102}</ph>public static void <ph id="103">{00103}</ph>
          <ph id="6">{6}</ph>main(String[] args) <ph id="7">{7}</ph>
          <ph id="202">{00202}</ph>throws <ph id="203">{00203}</ph>
          <ph id="8">{8}</ph>IOException {</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000241">
            <ph id="5">{5}</ph>
            <ph id="102">{00102}</ph>public static void <ph id="103">{00103}</ph>
            <ph id="6">{6}</ph>main(String[] args) <ph id="7">{7}</ph>
            <ph id="202">{00202}</ph>throws <ph id="203">{00203}</ph>
            <ph id="8">{8}</ph>IOException {</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000246" reformat="no">
        <source xml:lang="en-US">
          <ph id="9">{9}</ph>
          <ph id="102">{00102}</ph>while <ph id="103">{00103}</ph>
          <ph id="10">{10}</ph>(<ph id="11">{11}</ph>
          <ph id="202">{00202}</ph>true<ph id="203">{00203}</ph>
          <ph id="12">{12}</ph>) {</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000246">
            <ph id="9">{9}</ph>
            <ph id="102">{00102}</ph>while <ph id="103">{00103}</ph>
            <ph id="10">{10}</ph>(<ph id="11">{11}</ph>
            <ph id="202">{00202}</ph>true<ph id="203">{00203}</ph>
            <ph id="12">{12}</ph>) {</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000249" reformat="no">
        <source xml:lang="en-US">
          <ph id="13">{13}</ph>
          <ph id="102">{00102}</ph>int <ph id="103">{00103}</ph>
          <ph id="14">{14}</ph>x = System.<ph id="15">{15}</ph>
          <ph id="206">{00206}</ph>in<ph id="207">{00207}</ph>
          <ph id="16">{16}</ph>.read();</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000249">
            <ph id="13">{13}</ph>
            <ph id="102">{00102}</ph>int <ph id="103">{00103}</ph>
            <ph id="14">{14}</ph>x = System.<ph id="15">{15}</ph>
            <ph id="206">{00206}</ph>in<ph id="207">{00207}</ph>
            <ph id="16">{16}</ph>.read();</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000252" reformat="no">
        <source xml:lang="en-US">           System.<ph id="17">{17}</ph>
          <ph id="106">{00106}</ph>out<ph id="107">{00107}</ph>
          <ph id="18">{18}</ph>.println(x);</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000252">           System.<ph id="17">{17}</ph>
            <ph id="106">{00106}</ph>out<ph id="107">{00107}</ph>
            <ph id="18">{18}</ph>.println(x);</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000268" reformat="no">
        <source xml:lang="en-US">The InputStream class (remember, System.in is an InputStream object) has a read() method that lets you read data.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000268">The InputStream class (remember, System.in is an InputStream object) has a read() method that lets you read data.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000271" reformat="no">
        <source xml:lang="en-US">There's one problem: </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000271">There's one problem: </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000272" reformat="no">
        <source xml:lang="en-US">it reads <ph id="102">{00102}</ph>bytes<ph id="103">{00103}</ph>, not <ph id="202">{00202}</ph>characters<ph id="203">{00203}</ph>. </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000272">it reads <ph id="102">{00102}</ph>bytes<ph id="103">{00103}</ph>, not <ph id="202">{00202}</ph>characters<ph id="203">{00203}</ph>. </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000273" reformat="no">
        <source xml:lang="en-US">Let's try reading the Cyrillic letter "Я" from the keyboard.</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000273">Let's try reading the Cyrillic letter "Я" from the keyboard.</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000278" reformat="no">
        <source xml:lang="en-US">Console output:</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000278">Console output:</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000281" reformat="no">
        <source xml:lang="en-US">Я</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000281">Я</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000284" reformat="no">
        <source xml:lang="en-US">208</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000284">208</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000287" reformat="no">
        <source xml:lang="en-US">175</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000287">175</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000290" reformat="no">
        <source xml:lang="en-US">10</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000290">10</mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000295" reformat="no">
        <source xml:lang="en-US">Cyrillic letters occupy 2 bytes in the computer's memory (unlike Latin letters, which occupy just 1 byte). </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000295">Cyrillic letters occupy 2 bytes in the computer's memory (unlike Latin letters, which occupy just 1 byte). </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000299" reformat="no">
        <source xml:lang="en-US">In this case, 3 bytes are read from the stream: </source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000299">In this case, 3 bytes are read from the stream: </mrk>
        </seg-source>
      </trans-unit>
      <trans-unit id="0000300" reformat="no">
        <source xml:lang="en-US">the first two represent the letter "Я", and other byte represents a new line (Enter).</source>
        <seg-source xml:lang="en-US">
          <mrk mtype="seg" mid="0000300">the first two represent the letter "Я", and other byte represents a new line (Enter).</mrk>
        </seg-source>
      </trans-unit>
    </body>
  </file>
</xliff>

